[{"title":"Getting Started with ReductionUtility","type":0,"sectionRef":"#","url":"/ReductionUtility/docs/intro","content":"Getting Started with ReductionUtility Here are some quick links to get started using ReductionUtility: Installation guideUsage guideAPI Docs","keywords":""},{"title":"ReductionUtility","type":0,"sectionRef":"#","url":"/ReductionUtility/api/ReductionUtility","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"ReductionUtility","url":"/ReductionUtility/api/ReductionUtility#functions","content":" "},{"title":"CreateReducer​","type":1,"pageTitle":"ReductionUtility","url":"/ReductionUtility/api/ReductionUtility#CreateReducer","content":"&lt;/&gt; ReductionUtility.CreateReducer( initialState: State,-- The initial state of the reducer. Can be optional. handlers: {[string]: ( state: State, action: Action ) → State}-- The functions used for reductions. ) → Reducer&lt;State&gt; Creates a reducer that you can pass into a store or useReducer.  "},{"title":"MakeActionCreator​","type":1,"pageTitle":"ReductionUtility","url":"/ReductionUtility/api/ReductionUtility#MakeActionCreator","content":"&lt;/&gt; ReductionUtility.MakeActionCreator( name: Type,-- The name of the action. Will be the type of the action. creator: (Args...) → Payload-- The function that creates the payload of the action. ) → ActionCreator&lt;Type,Payload,Args...&gt; Creates an action creator that you can call to create an action. "},{"title":"Installation","type":0,"sectionRef":"#","url":"/ReductionUtility/docs/installation","content":"","keywords":""},{"title":"Method 1 - Wally​","type":1,"pageTitle":"Installation","url":"/ReductionUtility/docs/installation#method-1---wally","content":"Setup Wally by using wally init.Add howmanysmall/ReductionUtility as a dependency. [dependencies] ReductionUtility = &quot;howmanysmall/reduction-utility@^1.0.0&quot;  "},{"title":"Method #2 - HttpService​","type":1,"pageTitle":"Installation","url":"/ReductionUtility/docs/installation#method-2---httpservice","content":"This method uses HttpService to install ReductionUtility. In Roblox Studio, paste the following command into your command bar.Run the following command: local ReplicatedStorage = game:GetService(&quot;ReplicatedStorage&quot;) local HttpService = game:GetService(&quot;HttpService&quot;) local HttpEnabled = HttpService.HttpEnabled HttpService.HttpEnabled = true local function RequestAsync(RequestDictionary) return HttpService:RequestAsync(RequestDictionary) end local function GetAsync(Url, Headers) Headers[&quot;cache-control&quot;] = &quot;no-cache&quot; local Success, ResponseDictionary = pcall(RequestAsync, { Headers = Headers; Method = &quot;GET&quot;; Url = Url; }) if Success then if ResponseDictionary.Success then return ResponseDictionary.Body else return false, string.format(&quot;HTTP %d: %s&quot;, ResponseDictionary.StatusCode, ResponseDictionary.StatusMessage) end else return false, ResponseDictionary end end local function Initify(Root) local InitFile = Root:FindFirstChild(&quot;init&quot;) or Root:FindFirstChild(&quot;init.lua&quot;) or Root:FindFirstChild(&quot;init.client.lua&quot;) or Root:FindFirstChild(&quot;init.server.lua&quot;) if InitFile then InitFile.Name = Root.Name InitFile.Parent = Root.Parent for _, Child in Root:GetChildren() do Child.Parent = InitFile end Root:Destroy() Root = InitFile end for _, Child in Root:GetChildren() do Initify(Child) end return Root end local FilesList = HttpService:JSONDecode(assert(GetAsync( &quot;https://api.github.com/repos/howmanysmall/ReductionUtility/contents/src&quot;, {accept = &quot;application/vnd.github.v3+json&quot;} ))) local ReductionUtility = Instance.new(&quot;Folder&quot;) ReductionUtility.Name = &quot;ReductionUtility&quot; for _, FileData in FilesList do local ModuleScript = Instance.new(&quot;ModuleScript&quot;) ModuleScript.Name = tostring(string.match(FileData.name, &quot;(%w+)%.lua&quot;)) local Success, Source = GetAsync(FileData.download_url, {}) if not Success then ModuleScript.Source = string.format(&quot;-- %*&quot;, tostring(Source)) else ModuleScript.Source = tostring(Success) end ModuleScript.Parent = ReductionUtility end ReductionUtility.Parent = ReplicatedStorage Initify(ReductionUtility) HttpService.HttpEnabled = HttpEnabled "},{"title":"Next​","type":1,"pageTitle":"Installation","url":"/ReductionUtility/docs/installation#next","content":"Now, check out the API reference! "},{"title":"Full Example","type":0,"sectionRef":"#","url":"/ReductionUtility/docs/full-example","content":"Full Example Here's a full example of using ReductionUtility as I do in my own projects. --!optimize 2 -- I do not recommend strict mode, since it does not behave well. local ReductionUtility = require(&quot;ReductionUtility&quot;) local Reduction = {} export type IncrementNumber = ReductionUtility.Action&lt;&quot;IncrementNumber&quot;&gt; &amp; {Value: number} Reduction.IncrementNumber = ReductionUtility.MakeActionCreator(&quot;IncrementNumber&quot;, function(value: number) return { Value = value, } end) export type SetNumber = ReductionUtility.Action&lt;&quot;SetNumber&quot;&gt; &amp; {Value: number} Reduction.SetNumber = ReductionUtility.MakeActionCreator(&quot;SetNumber&quot;, function(value: number) return { Value = value, } end) export type SetString = ReductionUtility.Action&lt;&quot;SetString&quot;&gt; &amp; {Value: string} Reduction.SetString = ReductionUtility.MakeActionCreator(&quot;SetString&quot;, function(value: string) return { Value = value, } end) export type UppercaseString = ReductionUtility.Action&lt;&quot;UppercaseString&quot;&gt; Reduction.UppercaseString = ReductionUtility.MakeActionCreator(&quot;UppercaseString&quot;, function() return {} end) export type IState = { Number: number, String: string, } local INITIAL_STATE: IState = table.freeze({ Number = 0, String = &quot;&quot;, }) Reduction.InitialState = INITIAL_STATE Reduction.Reducer = ReductionUtility.CreateReducer(INITIAL_STATE, { [Reduction.IncrementNumber.name] = function(state: IState, action: IncrementNumber) local new = table.clone(state) state.Number += action.Value return new end, [Reduction.SetNumber.name] = function(state: IState, action: SetNumber) local new = table.clone(state) state.Number = action.Value return new end, [Reduction.SetString.name] = function(state: IState, action: SetString) local new = table.clone(state) state.String = action.Value return new end, [Reduction.UppercaseString.name] = function(state: IState) local new = table.clone(state) state.String = string.upper(state.String) return new end, }) table.freeze(Reduction) return Reduction Then you can pass the reducer to wherever you need it!","keywords":""}]